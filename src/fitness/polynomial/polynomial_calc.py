import sympy
from fitness.base_ff_classes.base_ff import base_ff
from sympy import symbols, expand, simplify


def evaluate_polynomial(poly, values):
    # 将多项式字符串转化为表达式，并简化
    expr = simplify(expand(poly))

    # 检查是否是平凡多项式（值恒等于 0）
    if expr == 0 or type(expr) == sympy.core.numbers.Float:
        return 500000

    # 用给定的变量值代入多项式表达式
    for i in values:
        result = abs(expr.subs(i))

    return float(result)


class polynomial_calc(base_ff):

    def __init__(self):
        # Initialise base fitness function class.
        super().__init__()

    def evaluate(self, ind, **kwargs):
        polynomial = ind.phenotype
        variables = [
            {'A': 0.363, 'B': 0.717, 'C': 0.82, 'D': 1.22, 'EE': 0.799, 'F': 0.229, 'G': 0.392, 'H': 56.5, },
            {'A': 0.331, 'B': 0.737, 'C': 0.838, 'D': 1.32, 'EE': 0.672, 'F': 0.208, 'G': 0.396, 'H': 53.4, },
            {'A': 0.316, 'B': 0.751, 'C': 0.843, 'D': 1.25, 'EE': 0.589, 'F': 0.201, 'G': 0.4, 'H': 53.0, },
            {'A': 0.354, 'B': 0.705, 'C': 0.835, 'D': 1.42, 'EE': 0.588, 'F': 0.212, 'G': 0.448, 'H': 55.3, },
            {'A': 0.346, 'B': 0.724, 'C': 0.837, 'D': 1.27, 'EE': 0.799, 'F': 0.2, 'G': 0.343, 'H': 54.0, },
            {'A': 0.324, 'B': 0.732, 'C': 0.886, 'D': 1.82, 'EE': 0.328, 'F': 0.152, 'G': 0.285, 'H': 51.2, },
            {'A': 0.305, 'B': 0.766, 'C': 0.847, 'D': 1.2, 'EE': 0.322, 'F': 0.194, 'G': 0.724, 'H': 108.0, },
            {'A': 0.376, 'B': 0.7, 'C': 0.816, 'D': 1.27, 'EE': 0.224, 'F': 0.24, 'G': 1.325, 'H': 200.8, },
            {'A': 0.361, 'B': 0.718, 'C': 0.821, 'D': 1.24, 'EE': 0.418, 'F': 0.229, 'G': 0.668, 'H': 102.6, },
            {'A': 0.392, 'B': 0.703, 'C': 0.811, 'D': 1.24, 'EE': 0.42, 'F': 0.235, 'G': 0.627, 'H': 95.5, },
            {'A': 0.419, 'B': 0.682, 'C': 0.82, 'D': 1.36, 'EE': 0.389, 'F': 0.235, 'G': 0.736, 'H': 119.2, },
            {'A': 0.373, 'B': 0.717, 'C': 0.824, 'D': 1.24, 'EE': 0.418, 'F': 0.225, 'G': 0.66, 'H': 92.4, },
            {'A': 0.369, 'B': 0.722, 'C': 0.817, 'D': 1.2, 'EE': 0.478, 'F': 0.231, 'G': 0.612, 'H': 92.4, },
            {'A': 0.363, 'B': 0.724, 'C': 0.823, 'D': 1.22, 'EE': 0.458, 'F': 0.225, 'G': 0.612, 'H': 88.3, },
            {'A': 0.36, 'B': 0.726, 'C': 0.82, 'D': 1.21, 'EE': 0.46, 'F': 0.226, 'G': 0.61, 'H': 96.3, },
            {'A': 0.35, 'B': 0.734, 'C': 0.827, 'D': 1.21, 'EE': 0.416, 'F': 0.219, 'G': 0.65, 'H': 101.9, },
            {'A': 0.353, 'B': 0.728, 'C': 0.82, 'D': 1.2, 'EE': 0.416, 'F': 0.227, 'G': 0.754, 'H': 105.2, },
            {'A': 0.377, 'B': 0.714, 'C': 0.819, 'D': 1.22, 'EE': 0.349, 'F': 0.231, 'G': 0.82, 'H': 118.8, },
            {'A': 0.396, 'B': 0.684, 'C': 0.821, 'D': 1.32, 'EE': 0.402, 'F': 0.231, 'G': 0.679, 'H': 94.1, },
            {'A': 0.382, 'B': 0.704, 'C': 0.814, 'D': 1.25, 'EE': 0.511, 'F': 0.238, 'G': 0.591, 'H': 93.1, },
            {'A': 0.386, 'B': 0.7, 'C': 0.812, 'D': 1.31, 'EE': 0.494, 'F': 0.24, 'G': 0.64, 'H': 92.3, },
            {'A': 0.402, 'B': 0.695, 'C': 0.801, 'D': 1.21, 'EE': 0.525, 'F': 0.248, 'G': 0.653, 'H': 91.5, },
            {'A': 0.333, 'B': 0.752, 'C': 0.838, 'D': 1.23, 'EE': 0.337, 'F': 0.205, 'G': 0.731, 'H': 91.0, },
            {'A': 0.403, 'B': 0.699, 'C': 0.804, 'D': 1.22, 'EE': 0.488, 'F': 0.24, 'G': 0.608, 'H': 98.6, },
            {'A': 0.429, 'B': 0.679, 'C': 0.779, 'D': 1.19, 'EE': 0.552, 'F': 0.253, 'G': 0.566, 'H': 90.2, },
            {'A': 0.43, 'B': 0.664, 'C': 0.791, 'D': 1.22, 'EE': 0.384, 'F': 0.239, 'G': 0.801, 'H': 118.0, },
            {'A': 0.151, 'B': 0.777, 'C': 0.932, 'D': 2.0, 'EE': 0.424, 'F': 0.059, 'G': 0.174, 'H': 35.4, },
            {'A': 0.368, 'B': 0.718, 'C': 0.811, 'D': 1.21, 'EE': 0.894, 'F': 0.229, 'G': 0.313, 'H': 45.6, },
            {'A': 0.32, 'B': 0.745, 'C': 0.839, 'D': 1.24, 'EE': 0.992, 'F': 0.206, 'G': 0.253, 'H': 38.73, }]
        fitness = abs(evaluate_polynomial(polynomial, variables))
        return fitness
