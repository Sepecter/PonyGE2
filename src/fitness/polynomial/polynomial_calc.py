import math

import sympy
from fitness.base_ff_classes.base_ff import base_ff
from sympy import symbols, expand, simplify


def evaluate_polynomial(poly, values):
    # 将多项式字符串转化为表达式，并简化
    expr = simplify(expand(poly))

    # 检查是否是平凡多项式（值恒等于 0）
    if expr == 0 or type(expr) == sympy.core.numbers.Float:
        return 5000000

    # 用给定的变量值代入多项式表达式
    cnt = 0
    result = 0
    for i in values:
        tmp = expr.subs(i) - i['G']
        result += tmp*tmp
        if abs(tmp//i['G'])> 0.1:
            cnt += 1
    if cnt > 20:
        return 5000000
    result /= 27

    result = math.sqrt(result)

    return float(result)


class polynomial_calc(base_ff):

    def __init__(self):
        # Initialise base fitness function class.
        super().__init__()

    def evaluate(self, ind, **kwargs):
        polynomial = ind.phenotype
        variables = [
            {'A': 0.36338, 'B': 0.71697, 'C': 0.82013, 'D': 0.00079866, 'EE': 0.22876, 'F': 392.02, 'G': 58.8, },
            {'A': 0.33052, 'B': 0.7366, 'C': 0.83782, 'D': 0.00067203, 'EE': 0.20752, 'F': 396.87, 'G': 65.9, },
            {'A': 0.31635, 'B': 0.75112, 'C': 0.84267, 'D': 0.00058924, 'EE': 0.2006, 'F': 400.35, 'G': 67.9, },
            {'A': 0.35383, 'B': 0.70513, 'C': 0.83496, 'D': 0.00058806, 'EE': 0.21214, 'F': 447.75, 'G': 57.0, },
            {'A': 0.346, 'B': 0.7237, 'C': 0.83685, 'D': 0.00079866, 'EE': 0.1998, 'F': 343.24, 'G': 57.0, },
            {'A': 0.30492, 'B': 0.76617, 'C': 0.84732, 'D': 0.0003221, 'EE': 0.19403, 'F': 723.72, 'G': 122.7, },
            {'A': 0.37599, 'B': 0.69951, 'C': 0.81555, 'D': 0.0002236, 'EE': 0.24017, 'F': 1325.3, 'G': 223.0, },
            {'A': 0.36057, 'B': 0.71827, 'C': 0.82094, 'D': 0.00041813, 'EE': 0.22806, 'F': 667.74, 'G': 107.6, },
            {'A': 0.39185, 'B': 0.70269, 'C': 0.81147, 'D': 0.00042023, 'EE': 0.23514, 'F': 627.47, 'G': 104.3, },
            {'A': 0.4191, 'B': 0.68165, 'C': 0.81977, 'D': 0.00038892, 'EE': 0.23546, 'F': 736.43, 'G': 125.7, },
            {'A': 0.37288, 'B': 0.71698, 'C': 0.82381, 'D': 0.00041754, 'EE': 0.22523, 'F': 659.59, 'G': 111.0, },
            {'A': 0.36909, 'B': 0.72233, 'C': 0.81688, 'D': 0.00047793, 'EE': 0.2309, 'F': 612.02, 'G': 100.7, },
            {'A': 0.36289, 'B': 0.72446, 'C': 0.82255, 'D': 0.00045845, 'EE': 0.22509, 'F': 611.52, 'G': 102.9, },
            {'A': 0.3598, 'B': 0.72634, 'C': 0.81992, 'D': 0.00045951, 'EE': 0.22648, 'F': 610.47, 'G': 103.7, },
            {'A': 0.35272, 'B': 0.72775, 'C': 0.81929, 'D': 0.00041588, 'EE': 0.22732, 'F': 753.98, 'G': 115.0, },
            {'A': 0.377, 'B': 0.7136, 'C': 0.81877, 'D': 0.00034864, 'EE': 0.23087, 'F': 820.03, 'G': 138.5, },
            {'A': 0.39584, 'B': 0.68357, 'C': 0.82131, 'D': 0.00040237, 'EE': 0.23118, 'F': 679.04, 'G': 108.2, },
            {'A': 0.38173, 'B': 0.70417, 'C': 0.81357, 'D': 0.00051055, 'EE': 0.23795, 'F': 591.35, 'G': 98.6, },
            {'A': 0.38612, 'B': 0.69994, 'C': 0.81203, 'D': 0.00049375, 'EE': 0.23943, 'F': 640.29, 'G': 107.1, },
            {'A': 0.33292, 'B': 0.75171, 'C': 0.83801, 'D': 0.00033659, 'EE': 0.20469, 'F': 731.28, 'G': 100.1, },
            {'A': 0.40203, 'B': 0.69547, 'C': 0.80066, 'D': 0.00052483, 'EE': 0.24786, 'F': 652.97, 'G': 125.3, },
            {'A': 0.42907, 'B': 0.6793, 'C': 0.77908, 'D': 0.00055164, 'EE': 0.25261, 'F': 565.63, 'G': 95.7, },
            {'A': 0.40301, 'B': 0.69864, 'C': 0.80357, 'D': 0.00048796, 'EE': 0.24026, 'F': 608.44, 'G': 85.7, },
            {'A': 0.43032, 'B': 0.66426, 'C': 0.79067, 'D': 0.00039364, 'EE': 0.23924, 'F': 801.39, 'G': 113.3, },
            {'A': 0.1507, 'B': 0.77733, 'C': 0.93217, 'D': 0.00042408, 'EE': 0.05933, 'F': 173.75, 'G': 31.8, },
            {'A': 0.36843, 'B': 0.71816, 'C': 0.8109, 'D': 0.00089428, 'EE': 0.22907, 'F': 313.36, 'G': 47.2, },
            {'A': 0.3197, 'B': 0.74522, 'C': 0.83878, 'D': 0.00099179, 'EE': 0.20565, 'F': 252.72, 'G': 40.7, }
            ]

        fitness = abs(evaluate_polynomial(polynomial, variables))
        return fitness
