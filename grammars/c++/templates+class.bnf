<templateDeclaration>::=<Template> <Less> <templateparameterList> <Greater> <simpleDeclaration>
<templateparameterList>::=<templateParameter> <Comma> <templateParameter>
<templateParameter>::=<typeParameter>
<typeParameter>::=<Typename_> Identifier <Assign> <theTypeId>
<simpleTemplateId>::=<templateName> <Less> <templateArgumentList> <Greater>
<templateId>::=<operatorFunctionId> <Less> <templateArgumentList> <Greater>|<simpleTemplateId>
<templateName>::=Identifier
<templateArgumentList>::=<templateArgument> <Ellipsis> <Comma> <templateArgument> <Ellipsis>
<templateArgument>::=<idExpression>|<theTypeId>
<theTypeId>::=<typeSpecifierSeq>
<typeSpecifierSeq>::=<typeSpecifier> <attributeSpecifierSeq>
<typeSpecifier>::=<classSpecifier>|<trailingTypeSpecifier>
<trailingTypeSpecifier>::=<cvQualifier>|<typeNameSpecifier>|<simpleTypeSpecifier>
<simpleTypeSpecifier>::=<Auto>|<Void>|<Double>|<Float>|<Unsigned>|<Signed>|<Float>|<Long>|<Int>|<Short>|<Bool>|<Char>|<nestedNameSpecifier> <Template> <simpleTemplateId>|<nestedNameSpecifier> <theTypeName>
<nestedNameSpecifier>::=<nestedNameSpecifier> <Template> <simpleTemplateId> <Doublecolon>
<theTypeName>::=<simpleTemplateId>|<typedefName>|<className>
<typedefName>::=Identifier
<typeNameSpecifier>::=<Typename_> <nestedNameSpecifier> <Template> <simpleTemplateId>
<attributeSpecifierSeq>::=<attributeSpecifier>
<attributeSpecifier>::=<alignmentspecifier>|<LeftBracket> <LeftBracket> <attributeList> <RightBracket> <RightBracket>
<alignmentspecifier>::=<Alignas> <LeftParen> <theTypeId> <Ellipsis> <RightParen>
<attributeList>::=<attribute> <Comma> <attribute> <Ellipsis>
<attribute>::=<attributeNamespace> <Doublecolon> Identifier <attributeArgumentClause>
<attributeNamespace>::=Identifier
<attributeArgumentClause>::=<LeftParen> <balancedTokenSeq> <RightParen>
<balancedTokenSeq>::=<balancedtoken>
<balancedtoken>::=<LeftBrace> <balancedTokenSeq> <RightBrace>|<LeftBracket> <balancedTokenSeq> <RightBracket>|<LeftParen> <balancedTokenSeq> <RightParen>
<operatorFunctionId>::=<Operator> <theOperator>
<theOperator>::=<LeftBracket> <RightBracket>|<LeftParen> <RightParen>|<Arrow>|<ArrowStar>|<Comma>|<MinusMinus>|<PlusPlus>|<OrOr>|<AndAnd>|<LessEqual>|<NotEqual>|<Equal>|<LeftShiftAssign>|<RightShiftAssign>|<Greater> <Greater>|<Less> <Less>|<OrAssign>|<AndAssign>|<XorAssign>|<ModAssign>|<StarAssign>|<MinusAssign>|<PlusAssign>|<GreaterEqual>|<Less>|<Greater>|<Assign>|<Not>|<Tilde>|<Or>|<And>|<Caret>|<Mod>|<Div>|<Star>|<Minus>|<Plus>
<idExpression>::=<qualifiedId>|<unqualifiedId>
<unqualifiedId>::=<templateId>|<operatorFunctionId>|Identifier
<qualifiedId>::=<nestedNameSpecifier> <Template> <unqualifiedId>
<className>::=<simpleTemplateId>|Identifier
<classSpecifier>::=<classHead> <LeftBrace> <RightBrace>
<classHead>::=<Union> <attributeSpecifierSeq> <classHeadName> <classVirtSpecifier>|<classKey> <attributeSpecifierSeq> <classHeadName> <classVirtSpecifier>
<classHeadName>::=<nestedNameSpecifier> <className>
<classVirtSpecifier>::=<Final>
<classKey>::=<Struct>|<Class>
<Alignas>::=alignas
<Alignof>::=alignof
<Asm>::=asm
<Auto>::=auto
<Bool>::=bool
<Break>::=break
<Case>::=case
<Catch>::=catch
<Char>::=char
<Char16>::=char16_t
<Char32>::=char32_t
<Class>::=class
<Const>::=const
<Constexpr>::=constexpr
<Const_cast>::=const_cast
<Continue>::=continue
<Decltype>::=decltype
<Default>::=default
<Delete>::=delete
<Do>::=do
<Double>::=double
<Dynamic_cast>::=dynamic_cast
<Else>::=else
<Enum>::=enum
<Explicit>::=explicit
<Export>::=export
<Extern>::=extern
<False_>::=false
<Final>::=final
<Float>::=float
<For>::=for
<Friend>::=friend
<Goto>::=goto
<If>::=if
<Inline>::=inline
<Int>::=int
<Long>::=long
<Mutable>::=mutable
<Namespace>::=namespace
<New>::=new
<Noexcept>::=noexcept
<Nullptr>::=nullptr
<Operator>::=operator
<Override>::=override
<Private>::=private
<Protected>::=protected
<Public>::=public
<Register>::=register
<Reinterpret_cast>::=reinterpret_cast
<Return>::=return
<Short>::=short
<Signed>::=signed
<Sizeof>::=sizeof
<Static>::=static
<Static_assert>::=static_assert
<Static_cast>::=static_cast
<Struct>::=struct
<Switch>::=switch
<Template>::=template
<This>::=this
<Thread_local>::=thread_local
<Throw>::=throw
<True_>::=true
<Try>::=try
<Typedef>::=typedef
<Typeid_>::=typeid
<Typename_>::=typename
<Union>::=union
<Unsigned>::=unsigned
<Using>::=using
<Virtual>::=virtual
<Void>::=void
<Volatile>::=volatile
<Wchar>::=wchar_t
<While>::=while
<LeftParen>::=(
<RightParen>::=)
<LeftBracket>::=[
<RightBracket>::=]
<LeftBrace>::={
<RightBrace>::=}
<Plus>::=+
<Minus>::=-
<Star>::=*
<Div>::=/
<Mod>::=%
<Caret>::=^
<And>::=&
<Or>::=|
<Tilde>::=~
<Not>::=
<Assign>::==
<Less>::=<
<Greater>::=>
<PlusAssign>::=+=
<MinusAssign>::=-=
<StarAssign>::=*=
<DivAssign>::=/=
<ModAssign>::=%=
<XorAssign>::=^=
<AndAssign>::=&=
<OrAssign>::=|=
<LeftShiftAssign>::=<<=
<RightShiftAssign>::=>>=
<Equal>::===
<NotEqual>::=!=
<LessEqual>::=<=
<GreaterEqual>::=>=
<AndAnd>::=&
<OrOr>::=|
<PlusPlus>::=++
<MinusMinus>::=--
<Comma>::=,
<ArrowStar>::=->*
<Arrow>::=->
<Question>::=?
<Colon>::=:
<Doublecolon>::=::
<Semi>::=;
<Dot>::=.
<DotStar>::=.*
<Ellipsis>::=...
<simpleDeclaration>::=<attributeSpecifierSeq> <declSpecifierSeq> <initDeclaratorList> <Semi>|<declSpecifierSeq> <initDeclaratorList> <Semi>
<attributeDeclaration>::=<attributeSpecifierSeq> <Semi>
<declSpecifier>::=<Constexpr>|<Typedef>|<Friend>|<functionSpecifier>|<typeSpecifier>|<storageClassSpecifier>
<functionSpecifier>::=<Explicit>|<Virtual>|<Inline>
<declSpecifierSeq>::=<declSpecifier> <attributeSpecifierSeq>
<storageClassSpecifier>::=<Mutable>|<Extern>|<Thread_local>|<Static>|<Register>
<initDeclaratorList>::=<initDeclarator>
<initDeclarator>::=<declarator>
<declarator>::=<noPointerDeclarator> <parametersAndQualifiers> <trailingReturnType>|<pointerDeclarator>
<pointerDeclarator>::=<pointerOperator> <Const> <noPointerDeclarator>
<noPointerDeclarator>::=<LeftParen> <pointerDeclarator> <RightParen>|<noPointerDeclarator> <LeftBracket> <RightBracket> <attributeSpecifierSeq>|<declaratorid> <attributeSpecifierSeq>
<parametersAndQualifiers>::=<LeftParen> <parameterDeclarationClause> <RightParen> <cvqualifierseq> <refqualifier> <attributeSpecifierSeq>
<trailingReturnType>::=<Arrow> <trailingTypeSpecifier> <abstractDeclarator>
<pointerOperator>::=<nestedNameSpecifier> <Star> <attributeSpecifierSeq> <cvqualifierseq>|<AndAnd> <attributeSpecifierSeq>
<cvqualifierseq>::=<cvQualifier>
<cvQualifier>::=<Volatile>|<Const>
<refqualifier>::=<AndAnd>|<And>
<declaratorid>::=<Ellipsis> <idExpression>
<abstractDeclarator>::=<abstractPackDeclarator>|<noPointerAbstractDeclarator> <parametersAndQualifiers> <trailingReturnType>|<pointerAbstractDeclarator>
<pointerAbstractDeclarator>::=<pointerOperator> <noPointerAbstractDeclarator>|<noPointerAbstractDeclarator>
<noPointerAbstractDeclarator>::=<LeftParen> <pointerAbstractDeclarator> <RightParen>|<LeftBracket> <RightBracket> <attributeSpecifierSeq>|<parametersAndQualifiers>|<noPointerAbstractDeclarator> <noPointerAbstractDeclarator> <LeftBracket> <RightBracket> <attributeSpecifierSeq>
<abstractPackDeclarator>::=<pointerOperator> <noPointerAbstractPackDeclarator>
<noPointerAbstractPackDeclarator>::=<Ellipsis>|<noPointerAbstractPackDeclarator> <LeftBracket> <RightBracket> <attributeSpecifierSeq>
<parameterDeclarationClause>::=<parameterDeclarationList> <Comma> <Ellipsis>
<parameterDeclarationList>::=<parameterDeclaration> <Comma> <parameterDeclaration>
<parameterDeclaration>::=<attributeSpecifierSeq> <declSpecifierSeq> <abstractDeclarator>
