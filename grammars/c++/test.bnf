<declarationseq_question>::=" "|<declarationseq>
<literal_plus>::=<literal>|<literal> <literal_plus>
<primaryExpression>::=<lambdaExpression>|<idExpression>|<LeftParen> <expression> <RightParen>|<This>|<literal_plus>
<idExpression>::=<qualifiedId>|<unqualifiedId>
<unqualifiedId>::=<templateId>|<Tilde> <decltypeSpecifier>|<Tilde> <className>|<literalOperatorId>|<conversionFunctionId>|<operatorFunctionId>|"Identifier"
<Template_question>::=" "|<Template>
<qualifiedId>::=<nestedNameSpecifier> <Template_question> <unqualifiedId>
<(_theTypeName_|_namespaceName_|_decltypeSpecifier_)>::=<decltypeSpecifier>|<namespaceName>|<theTypeName>
<(_theTypeName_|_namespaceName_|_decltypeSpecifier_)_question>::=" "|<(_theTypeName_|_namespaceName_|_decltypeSpecifier_)>
<nestedNameSpecifier>::=<nestedNameSpecifier> <Template_question> <simpleTemplateId> <Doublecolon>|<nestedNameSpecifier> "Identifier" <Doublecolon>|<(_theTypeName_|_namespaceName_|_decltypeSpecifier_)_question> <Doublecolon> <Doublecolon>
<lambdaDeclarator_question>::=" "|<lambdaDeclarator>
<lambdaExpression>::=<lambdaIntroducer> <lambdaDeclarator_question> <compoundStatement>
<lambdaCapture_question>::=" "|<lambdaCapture>
<lambdaIntroducer>::=<LeftBracket> <lambdaCapture_question> <RightBracket>
<(_Comma_captureList_)>::=<Comma> <captureList>
<(_Comma_captureList_)_question>::=" "|<(_Comma_captureList_)>
<lambdaCapture>::=<captureDefault> <(_Comma_captureList_)_question>|<captureList>
<captureDefault>::=<Assign>|<And>
<(_Comma_capture_)>::=<Comma> <capture>
<(_Comma_capture_)_star>::=" "|<(_Comma_capture_)> <(_Comma_capture_)_star>
<Ellipsis_question>::=" "|<Ellipsis>
<captureList>::=<capture> <(_Comma_capture_)_star> <Ellipsis_question>
<capture>::=<initcapture>|<simpleCapture>
<And_question>::=" "|<And>
<simpleCapture>::=<This>|<And_question> "Identifier"
<initcapture>::=<And_question> "Identifier" <initializer>
<parameterDeclarationClause_question>::=" "|<parameterDeclarationClause>
<Mutable_question>::=" "|<Mutable>
<exceptionSpecification_question>::=" "|<exceptionSpecification>
<attributeSpecifierSeq_question>::=" "|<attributeSpecifierSeq>
<trailingReturnType_question>::=" "|<trailingReturnType>
<lambdaDeclarator>::=<LeftParen> <parameterDeclarationClause_question> <RightParen> <Mutable_question> <exceptionSpecification_question> <attributeSpecifierSeq_question> <trailingReturnType_question>
<expressionList_question>::=" "|<expressionList>
<postfixExpression>::=<typeIdOfTheTypeId> <LeftParen> <theTypeId> <RightParen>|<typeIdOfTheTypeId> <LeftParen> <expression> <RightParen>|<Const_cast> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<Reinterpret_cast> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<Static_cast> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<Dynamic_cast> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <MinusMinus> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <PlusPlus> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <Arrow> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <Arrow> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <Dot> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <Dot> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<typeNameSpecifier> <bracedInitList> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<typeNameSpecifier> <bracedInitList> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<typeNameSpecifier> <LeftParen> <expressionList_question> <RightParen> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<typeNameSpecifier> <LeftParen> <expressionList_question> <RightParen> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<simpleTypeSpecifier> <bracedInitList> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<simpleTypeSpecifier> <bracedInitList> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<simpleTypeSpecifier> <LeftParen> <expressionList_question> <RightParen> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<simpleTypeSpecifier> <LeftParen> <expressionList_question> <RightParen> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftParen> <expressionList_question> <RightParen> <bracedInitList> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftParen> <expressionList_question> <RightParen> <bracedInitList> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftParen> <expressionList_question> <RightParen> <LeftParen> <expressionList_question> <RightParen> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftParen> <expressionList_question> <RightParen> <LeftParen> <expressionList_question> <RightParen> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <bracedInitList> <RightBracket> <bracedInitList> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <bracedInitList> <RightBracket> <bracedInitList> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <bracedInitList> <RightBracket> <LeftParen> <expressionList_question> <RightParen> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <bracedInitList> <RightBracket> <LeftParen> <expressionList_question> <RightParen> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <expression> <RightBracket> <bracedInitList> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <expression> <RightBracket> <bracedInitList> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <expression> <RightBracket> <LeftParen> <expressionList_question> <RightParen> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<postfixExpression> <LeftBracket> <expression> <RightBracket> <LeftParen> <expressionList_question> <RightParen> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<primaryExpression> <RightBracket> <bracedInitList> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<primaryExpression> <RightBracket> <bracedInitList> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<primaryExpression> <RightBracket> <LeftParen> <expressionList_question> <RightParen> <pseudoDestructorName> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>|<primaryExpression> <RightBracket> <LeftParen> <expressionList_question> <RightParen> <Template_question> <idExpression> <Less> <theTypeId> <Greater> <LeftParen> <expression> <RightParen> <RightParen>
<typeIdOfTheTypeId>::=<Typeid_>
<expressionList>::=<initializerList>
<nestedNameSpecifier_question>::=" "|<nestedNameSpecifier>
<(_theTypeName_Doublecolon_)>::=<theTypeName> <Doublecolon>
<(_theTypeName_Doublecolon_)_question>::=" "|<(_theTypeName_Doublecolon_)>
<pseudoDestructorName>::=<Tilde> <decltypeSpecifier>|<nestedNameSpecifier> <Template> <simpleTemplateId> <Doublecolon> <Tilde> <theTypeName>|<nestedNameSpecifier_question> <(_theTypeName_Doublecolon_)_question> <Tilde> <theTypeName>
<unaryExpression>::=<deleteExpression>|<newExpression_>|<noExceptExpression>|<Alignof> <LeftParen> <theTypeId> <RightParen>|<Sizeof> <Ellipsis> <LeftParen> "Identifier" <RightParen>|<Sizeof> <LeftParen> <theTypeId> <RightParen>|<Sizeof> <unaryExpression>|<unaryOperator> <unaryExpression>|<MinusMinus> <unaryExpression>|<PlusPlus> <unaryExpression>|<postfixExpression> <unaryExpression>
<unaryOperator>::=<Not>|<Minus>|<Tilde>|<Plus>|<And>|<Star>|<Or>
<Doublecolon_question>::=" "|<Doublecolon>
<newPlacement_question>::=" "|<newPlacement>
<newInitializer__question>::=" "|<newInitializer_>
<newExpression_>::=<Doublecolon_question> <New> <newPlacement_question> <LeftParen> <theTypeId> <RightParen> <newInitializer__question>|<Doublecolon_question> <New> <newPlacement_question> <newTypeId> <newInitializer__question>
<newPlacement>::=<LeftParen> <expressionList> <RightParen>
<newDeclarator__question>::=" "|<newDeclarator_>
<newTypeId>::=<typeSpecifierSeq> <newDeclarator__question>
<newDeclarator_>::=<noPointerNewDeclarator>|<pointerOperator> <newDeclarator__question>
<noPointerNewDeclarator>::=<noPointerNewDeclarator> <LeftBracket> <constantExpression> <RightBracket> <attributeSpecifierSeq_question>|<LeftBracket> <expression> <RightBracket> <attributeSpecifierSeq_question>
<newInitializer_>::=<bracedInitList>|<LeftParen> <expressionList_question> <RightParen>
<(_LeftBracket_RightBracket_)>::=<LeftBracket> <RightBracket>
<(_LeftBracket_RightBracket_)_question>::=" "|<(_LeftBracket_RightBracket_)>
<deleteExpression>::=<Doublecolon_question> <Delete> <(_LeftBracket_RightBracket_)_question> <castExpression>
<noExceptExpression>::=<Noexcept> <LeftParen> <expression> <RightParen>
<castExpression>::=<LeftParen> <theTypeId> <RightParen> <castExpression>|<unaryExpression>
<(_(_DotStar_|_ArrowStar_)_castExpression_)>::=<ArrowStar> <castExpression>|<DotStar> <castExpression>
<(_(_DotStar_|_ArrowStar_)_castExpression_)_star>::=" "|<(_(_DotStar_|_ArrowStar_)_castExpression_)> <(_(_DotStar_|_ArrowStar_)_castExpression_)_star>
<pointerMemberExpression>::=<castExpression> <(_(_DotStar_|_ArrowStar_)_castExpression_)_star>
<(_(_Star_|_Div_|_Mod_)_pointerMemberExpression_)>::=<Mod> <pointerMemberExpression>|<Div> <pointerMemberExpression>|<Star> <pointerMemberExpression>
<(_(_Star_|_Div_|_Mod_)_pointerMemberExpression_)_star>::=" "|<(_(_Star_|_Div_|_Mod_)_pointerMemberExpression_)> <(_(_Star_|_Div_|_Mod_)_pointerMemberExpression_)_star>
<multiplicativeExpression>::=<pointerMemberExpression> <(_(_Star_|_Div_|_Mod_)_pointerMemberExpression_)_star>
<(_(_Plus_|_Minus_)_multiplicativeExpression_)>::=<Minus> <multiplicativeExpression>|<Plus> <multiplicativeExpression>
<(_(_Plus_|_Minus_)_multiplicativeExpression_)_star>::=" "|<(_(_Plus_|_Minus_)_multiplicativeExpression_)> <(_(_Plus_|_Minus_)_multiplicativeExpression_)_star>
<additiveExpression>::=<multiplicativeExpression> <(_(_Plus_|_Minus_)_multiplicativeExpression_)_star>
<(_shiftOperator_additiveExpression_)>::=<shiftOperator> <additiveExpression>
<(_shiftOperator_additiveExpression_)_star>::=" "|<(_shiftOperator_additiveExpression_)> <(_shiftOperator_additiveExpression_)_star>
<shiftExpression>::=<additiveExpression> <(_shiftOperator_additiveExpression_)_star>
<shiftOperator>::=<Less> <Less>|<Greater> <Greater>
<(_(_Less_|_Greater_|_LessEqual_|_GreaterEqual_)_shiftExpression_)>::=<GreaterEqual> <shiftExpression>|<LessEqual> <shiftExpression>|<Greater> <shiftExpression>|<Less> <shiftExpression>
<(_(_Less_|_Greater_|_LessEqual_|_GreaterEqual_)_shiftExpression_)_star>::=" "|<(_(_Less_|_Greater_|_LessEqual_|_GreaterEqual_)_shiftExpression_)> <(_(_Less_|_Greater_|_LessEqual_|_GreaterEqual_)_shiftExpression_)_star>
<relationalExpression>::=<shiftExpression> <(_(_Less_|_Greater_|_LessEqual_|_GreaterEqual_)_shiftExpression_)_star>
<(_(_Equal_|_NotEqual_)_relationalExpression_)>::=<NotEqual> <relationalExpression>|<Equal> <relationalExpression>
<(_(_Equal_|_NotEqual_)_relationalExpression_)_star>::=" "|<(_(_Equal_|_NotEqual_)_relationalExpression_)> <(_(_Equal_|_NotEqual_)_relationalExpression_)_star>
<equalityExpression>::=<relationalExpression> <(_(_Equal_|_NotEqual_)_relationalExpression_)_star>
<(_And_equalityExpression_)>::=<And> <equalityExpression>
<(_And_equalityExpression_)_star>::=" "|<(_And_equalityExpression_)> <(_And_equalityExpression_)_star>
<andExpression>::=<equalityExpression> <(_And_equalityExpression_)_star>
<(_Caret_andExpression_)>::=<Caret> <andExpression>
<(_Caret_andExpression_)_star>::=" "|<(_Caret_andExpression_)> <(_Caret_andExpression_)_star>
<exclusiveOrExpression>::=<andExpression> <(_Caret_andExpression_)_star>
<(_Or_exclusiveOrExpression_)>::=<Or> <exclusiveOrExpression>
<(_Or_exclusiveOrExpression_)_star>::=" "|<(_Or_exclusiveOrExpression_)> <(_Or_exclusiveOrExpression_)_star>
<inclusiveOrExpression>::=<exclusiveOrExpression> <(_Or_exclusiveOrExpression_)_star>
<(_AndAnd_inclusiveOrExpression_)>::=<AndAnd> <inclusiveOrExpression>
<(_AndAnd_inclusiveOrExpression_)_star>::=" "|<(_AndAnd_inclusiveOrExpression_)> <(_AndAnd_inclusiveOrExpression_)_star>
<logicalAndExpression>::=<inclusiveOrExpression> <(_AndAnd_inclusiveOrExpression_)_star>
<(_OrOr_logicalAndExpression_)>::=<OrOr> <logicalAndExpression>
<(_OrOr_logicalAndExpression_)_star>::=" "|<(_OrOr_logicalAndExpression_)> <(_OrOr_logicalAndExpression_)_star>
<logicalOrExpression>::=<logicalAndExpression> <(_OrOr_logicalAndExpression_)_star>
<(_Question_expression_Colon_assignmentExpression_)>::=<Question> <expression> <Colon> <assignmentExpression>
<(_Question_expression_Colon_assignmentExpression_)_question>::=" "|<(_Question_expression_Colon_assignmentExpression_)>
<conditionalExpression>::=<logicalOrExpression> <(_Question_expression_Colon_assignmentExpression_)_question>
<assignmentExpression>::=<throwExpression>|<logicalOrExpression> <assignmentOperator> <initializerClause>|<conditionalExpression>
<assignmentOperator>::=<OrAssign>|<XorAssign>|<AndAssign>|<LeftShiftAssign>|<RightShiftAssign>|<MinusAssign>|<PlusAssign>|<ModAssign>|<DivAssign>|<StarAssign>|<Assign>
<(_Comma_assignmentExpression_)>::=<Comma> <assignmentExpression>
<(_Comma_assignmentExpression_)_star>::=" "|<(_Comma_assignmentExpression_)> <(_Comma_assignmentExpression_)_star>
<expression>::=<assignmentExpression> <(_Comma_assignmentExpression_)_star>
<constantExpression>::=<conditionalExpression>
<statement>::=<attributeSpecifierSeq_question> <tryBlock>|<attributeSpecifierSeq_question> <jumpStatement>|<attributeSpecifierSeq_question> <iterationStatement>|<attributeSpecifierSeq_question> <selectionStatement>|<attributeSpecifierSeq_question> <compoundStatement>|<attributeSpecifierSeq_question> <expressionStatement>|<declarationStatement>|<labeledStatement>
<labeledStatement>::=<attributeSpecifierSeq_question> <Default> <Colon> <statement>|<attributeSpecifierSeq_question> <Case> <constantExpression> <Colon> <statement>|<attributeSpecifierSeq_question> "Identifier" <Colon> <statement>
<expression_question>::=" "|<expression>
<expressionStatement>::=<expression_question> <Semi>
<statementSeq_question>::=" "|<statementSeq>
<compoundStatement>::=<LeftBrace> <statementSeq_question> <RightBrace>
<statement_plus>::=<statement>|<statement> <statement_plus>
<statementSeq>::=<statement_plus>
<(_Else_statement_)>::=<Else> <statement>
<(_Else_statement_)_question>::=" "|<(_Else_statement_)>
<selectionStatement>::=<Switch> <LeftParen> <condition> <RightParen> <statement>|<If> <LeftParen> <condition> <RightParen> <statement> <(_Else_statement_)_question>
<condition>::=<attributeSpecifierSeq_question> <declSpecifierSeq> <declarator> <bracedInitList>|<attributeSpecifierSeq_question> <declSpecifierSeq> <declarator> <Assign> <initializerClause>|<expression>
<condition_question>::=" "|<condition>
<iterationStatement>::=<For> <LeftParen> <forRangeDeclaration> <Colon> <forRangeInitializer> <RightParen> <statement>|<For> <LeftParen> <forInitStatement> <condition_question> <Semi> <expression_question> <RightParen> <statement>|<Do> <statement> <While> <LeftParen> <expression> <RightParen> <Semi> <RightParen> <statement>|<While> <LeftParen> <condition> <RightParen> <statement> <RightParen> <statement>
<forInitStatement>::=<simpleDeclaration>|<expressionStatement>
<forRangeDeclaration>::=<attributeSpecifierSeq_question> <declSpecifierSeq> <declarator>
<forRangeInitializer>::=<bracedInitList>|<expression>
<(_expression_|_bracedInitList_)>::=<bracedInitList>|<expression>
<(_expression_|_bracedInitList_)_question>::=" "|<(_expression_|_bracedInitList_)>
<jumpStatement>::=<Goto> "Identifier" <Semi>|<Return> <(_expression_|_bracedInitList_)_question> <Semi>|<Continue> <Semi>|<Break> <Semi>
<declarationStatement>::=<blockDeclaration>
<declaration_plus>::=<declaration>|<declaration> <declaration_plus>
<declarationseq>::=<declaration_plus>
<declaration>::=<attributeDeclaration>|<emptyDeclaration_>|<namespaceDefinition>|<linkageSpecification>|<explicitSpecialization>|<explicitInstantiation>|<templateDeclaration>|<functionDefinition>|<blockDeclaration>
<blockDeclaration>::=<opaqueEnumDeclaration>|<aliasDeclaration>|<staticAssertDeclaration>|<usingDirective>|<usingDeclaration>|<namespaceAliasDefinition>|<asmDefinition>|<simpleDeclaration>
<aliasDeclaration>::=<Using> "Identifier" <attributeSpecifierSeq_question> <Assign> <theTypeId> <Semi>
<declSpecifierSeq_question>::=" "|<declSpecifierSeq>
<initDeclaratorList_question>::=" "|<initDeclaratorList>
<simpleDeclaration>::=<attributeSpecifierSeq> <declSpecifierSeq_question> <initDeclaratorList> <Semi>|<declSpecifierSeq_question> <initDeclaratorList_question> <Semi>
<staticAssertDeclaration>::=<Static_assert> <LeftParen> <constantExpression> <Comma> <StringLiteral> <RightParen> <Semi>
<emptyDeclaration_>::=<Semi>
<attributeDeclaration>::=<attributeSpecifierSeq> <Semi>
<declSpecifier>::=<Constexpr>|<Typedef>|<Friend>|<functionSpecifier>|<typeSpecifier>|<storageClassSpecifier>
<declSpecifier_plus>::=<declSpecifier>|<declSpecifier> <declSpecifier_plus>
<declSpecifierSeq>::=<declSpecifier_plus> <attributeSpecifierSeq_question>
<storageClassSpecifier>::=<Mutable>|<Extern>|<Thread_local>|<Static>|<Register>
<functionSpecifier>::=<Explicit>|<Virtual>|<Inline>
<typedefName>::="Identifier"
<typeSpecifier>::=<enumSpecifier>|<classSpecifier>|<trailingTypeSpecifier>
<trailingTypeSpecifier>::=<cvQualifier>|<typeNameSpecifier>|<elaboratedTypeSpecifier>|<simpleTypeSpecifier>
<typeSpecifier_plus>::=<typeSpecifier>|<typeSpecifier> <typeSpecifier_plus>
<typeSpecifierSeq>::=<typeSpecifier_plus> <attributeSpecifierSeq_question>
<trailingTypeSpecifier_plus>::=<trailingTypeSpecifier>|<trailingTypeSpecifier> <trailingTypeSpecifier_plus>
<trailingTypeSpecifierSeq>::=<trailingTypeSpecifier_plus> <attributeSpecifierSeq_question>
<simpleTypeSpecifier>::=<decltypeSpecifier>|<Auto>|<Void>|<Double>|<Unsigned>|<Signed>|<Float>|<Long>|<Int>|<Short>|<Bool>|<Wchar>|<Char32>|<Char16>|<Char>|<nestedNameSpecifier> <Template> <simpleTemplateId>|<nestedNameSpecifier_question> <theTypeName>
<theTypeName>::=<simpleTemplateId>|<typedefName>|<enumName>|<className>
<decltypeSpecifier>::=<Decltype> <LeftParen> <Auto> <RightParen>|<Decltype> <LeftParen> <expression> <RightParen>
<elaboratedTypeSpecifier>::=<Enum> <nestedNameSpecifier_question> "Identifier"|<classKey> <nestedNameSpecifier> <Template_question> <simpleTemplateId>|<classKey> <simpleTemplateId>|<classKey> <attributeSpecifierSeq_question> <nestedNameSpecifier_question> "Identifier"
<enumName>::="Identifier"
<Comma_question>::=" "|<Comma>
<(_enumeratorList_Comma_question_)>::=<enumeratorList> <Comma_question>
<(_enumeratorList_Comma_question_)_question>::=" "|<(_enumeratorList_Comma_question_)>
<enumSpecifier>::=<enumHead> <LeftBrace> <(_enumeratorList_Comma_question_)_question> <RightBrace>
<(_nestedNameSpecifier_question_Identifier_)>::=<nestedNameSpecifier_question> "Identifier"
<(_nestedNameSpecifier_question_Identifier_)_question>::=" "|<(_nestedNameSpecifier_question_Identifier_)>
<enumbase_question>::=" "|<enumbase>
<enumHead>::=<enumkey> <attributeSpecifierSeq_question> <(_nestedNameSpecifier_question_Identifier_)_question> <enumbase_question>
<opaqueEnumDeclaration>::=<enumkey> <attributeSpecifierSeq_question> "Identifier" <enumbase_question> <Semi>
<(_Class_|_Struct_)>::=<Struct>|<Class>
<(_Class_|_Struct_)_question>::=" "|<(_Class_|_Struct_)>
<enumkey>::=<Enum> <(_Class_|_Struct_)_question>
<enumbase>::=<Colon> <typeSpecifierSeq>
<(_Comma_enumeratorDefinition_)>::=<Comma> <enumeratorDefinition>
<(_Comma_enumeratorDefinition_)_star>::=" "|<(_Comma_enumeratorDefinition_)> <(_Comma_enumeratorDefinition_)_star>
<enumeratorList>::=<enumeratorDefinition> <(_Comma_enumeratorDefinition_)_star>
<(_Assign_constantExpression_)>::=<Assign> <constantExpression>
<(_Assign_constantExpression_)_question>::=" "|<(_Assign_constantExpression_)>
<enumeratorDefinition>::=<enumerator> <(_Assign_constantExpression_)_question>
<enumerator>::="Identifier"
<namespaceName>::=<namespaceAlias>|<originalNamespaceName>
<originalNamespaceName>::="Identifier"
<Inline_question>::=" "|<Inline>
<(_Identifier_|_originalNamespaceName_)>::=<originalNamespaceName>|"Identifier"
<(_Identifier_|_originalNamespaceName_)_question>::=" "|<(_Identifier_|_originalNamespaceName_)>
<namespaceDefinition>::=<Inline_question> <Namespace> <(_Identifier_|_originalNamespaceName_)_question> <LeftBrace> <declarationseq_question> <RightBrace>
<namespaceAlias>::="Identifier"
<namespaceAliasDefinition>::=<Namespace> "Identifier" <Assign> <qualifiednamespacespecifier> <Semi>
<qualifiednamespacespecifier>::=<nestedNameSpecifier_question> <namespaceName>
<Typename__question>::=" "|<Typename_>
<usingDeclaration>::=<Using> <Doublecolon> <unqualifiedId> <Semi>|<Using> <Typename__question> <nestedNameSpecifier> <unqualifiedId> <Semi>
<usingDirective>::=<attributeSpecifierSeq_question> <Using> <Namespace> <nestedNameSpecifier_question> <namespaceName> <Semi>
<asmDefinition>::=<Asm> <LeftParen> <StringLiteral> <RightParen> <Semi>
<linkageSpecification>::=<Extern> <StringLiteral> <declaration>|<Extern> <StringLiteral> <LeftBrace> <declarationseq_question> <RightBrace>
<attributeSpecifier_plus>::=<attributeSpecifier>|<attributeSpecifier> <attributeSpecifier_plus>
<attributeSpecifierSeq>::=<attributeSpecifier_plus>
<attributeList_question>::=" "|<attributeList>
<attributeSpecifier>::=<alignmentspecifier>|<LeftBracket> <LeftBracket> <attributeList_question> <RightBracket> <RightBracket>
<alignmentspecifier>::=<Alignas> <LeftParen> <constantExpression> <Ellipsis_question> <RightParen>|<Alignas> <LeftParen> <theTypeId> <Ellipsis_question> <RightParen>
<(_Comma_attribute_)>::=<Comma> <attribute>
<(_Comma_attribute_)_star>::=" "|<(_Comma_attribute_)> <(_Comma_attribute_)_star>
<attributeList>::=<attribute> <(_Comma_attribute_)_star> <Ellipsis_question>
<(_attributeNamespace_Doublecolon_)>::=<attributeNamespace> <Doublecolon>
<(_attributeNamespace_Doublecolon_)_question>::=" "|<(_attributeNamespace_Doublecolon_)>
<attributeArgumentClause_question>::=" "|<attributeArgumentClause>
<attribute>::=<(_attributeNamespace_Doublecolon_)_question> "Identifier" <attributeArgumentClause_question>
<attributeNamespace>::="Identifier"
<balancedTokenSeq_question>::=" "|<balancedTokenSeq>
<attributeArgumentClause>::=<LeftParen> <balancedTokenSeq_question> <RightParen>
<balancedtoken_plus>::=<balancedtoken>|<balancedtoken> <balancedtoken_plus>
<balancedTokenSeq>::=<balancedtoken_plus>
<(_LeftParen_|_RightParen_|_LeftBrace_|_RightBrace_|_LeftBracket_|_RightBracket_)>::=<RightBracket>|<LeftBracket>|<RightBrace>|<LeftBrace>|<RightParen>|<LeftParen>
<(_LeftParen_|_RightParen_|_LeftBrace_|_RightBrace_|_LeftBracket_|_RightBracket_)_plus>::=<(_LeftParen_|_RightParen_|_LeftBrace_|_RightBrace_|_LeftBracket_|_RightBracket_)>|<(_LeftParen_|_RightParen_|_LeftBrace_|_RightBrace_|_LeftBracket_|_RightBracket_)> <(_LeftParen_|_RightParen_|_LeftBrace_|_RightBrace_|_LeftBracket_|_RightBracket_)_plus>
<balancedtoken>::=<(_LeftParen_|_RightParen_|_LeftBrace_|_RightBrace_|_LeftBracket_|_RightBracket_)_plus>|<LeftBrace> <balancedTokenSeq> <RightBrace>|<LeftBracket> <balancedTokenSeq> <RightBracket>|<LeftParen> <balancedTokenSeq> <RightParen>
<(_Comma_initDeclarator_)>::=<Comma> <initDeclarator>
<(_Comma_initDeclarator_)_star>::=" "|<(_Comma_initDeclarator_)> <(_Comma_initDeclarator_)_star>
<initDeclaratorList>::=<initDeclarator> <(_Comma_initDeclarator_)_star>
<initializer_question>::=" "|<initializer>
<initDeclarator>::=<declarator> <initializer_question>
<declarator>::=<noPointerDeclarator> <parametersAndQualifiers> <trailingReturnType>|<pointerDeclarator>
<Const_question>::=" "|<Const>
<(_pointerOperator_Const_question_)>::=<pointerOperator> <Const_question>
<(_pointerOperator_Const_question_)_star>::=" "|<(_pointerOperator_Const_question_)> <(_pointerOperator_Const_question_)_star>
<pointerDeclarator>::=<(_pointerOperator_Const_question_)_star> <noPointerDeclarator>
<constantExpression_question>::=" "|<constantExpression>
<noPointerDeclarator>::=<LeftParen> <pointerDeclarator> <RightParen>|<noPointerDeclarator> <LeftBracket> <constantExpression_question> <RightBracket> <attributeSpecifierSeq_question>|<noPointerDeclarator> <parametersAndQualifiers>|<declaratorid> <attributeSpecifierSeq_question>
<cvqualifierseq_question>::=" "|<cvqualifierseq>
<refqualifier_question>::=" "|<refqualifier>
<parametersAndQualifiers>::=<LeftParen> <parameterDeclarationClause_question> <RightParen> <cvqualifierseq_question> <refqualifier_question> <exceptionSpecification_question> <attributeSpecifierSeq_question>
<abstractDeclarator_question>::=" "|<abstractDeclarator>
<trailingReturnType>::=<Arrow> <trailingTypeSpecifierSeq> <abstractDeclarator_question>
<pointerOperator>::=<nestedNameSpecifier_question> <Star> <attributeSpecifierSeq_question> <cvqualifierseq_question>|<AndAnd> <attributeSpecifierSeq_question>|<And> <attributeSpecifierSeq_question>
<cvQualifier_plus>::=<cvQualifier>|<cvQualifier> <cvQualifier_plus>
<cvqualifierseq>::=<cvQualifier_plus>
<cvQualifier>::=<Volatile>|<Const>
<refqualifier>::=<AndAnd>|<And>
<declaratorid>::=<Ellipsis_question> <idExpression>
<theTypeId>::=<typeSpecifierSeq> <abstractDeclarator_question>
<noPointerAbstractDeclarator_question>::=" "|<noPointerAbstractDeclarator>
<abstractDeclarator>::=<abstractPackDeclarator>|<noPointerAbstractDeclarator_question> <parametersAndQualifiers> <trailingReturnType>|<pointerAbstractDeclarator>
<pointerOperator_plus>::=<pointerOperator>|<pointerOperator> <pointerOperator_plus>
<pointerAbstractDeclarator>::=<pointerOperator_plus> <noPointerAbstractDeclarator_question>|<noPointerAbstractDeclarator>
<noPointerAbstractDeclarator>::=<LeftParen> <pointerAbstractDeclarator> <RightParen>|<LeftBracket> <constantExpression_question> <RightBracket> <attributeSpecifierSeq_question>|<parametersAndQualifiers>|<noPointerAbstractDeclarator> <noPointerAbstractDeclarator> <LeftBracket> <constantExpression_question> <RightBracket> <attributeSpecifierSeq_question>|<noPointerAbstractDeclarator> <parametersAndQualifiers>
<pointerOperator_star>::=" "|<pointerOperator> <pointerOperator_star>
<abstractPackDeclarator>::=<pointerOperator_star> <noPointerAbstractPackDeclarator>
<noPointerAbstractPackDeclarator>::=<Ellipsis>|<noPointerAbstractPackDeclarator> <LeftBracket> <constantExpression_question> <RightBracket> <attributeSpecifierSeq_question>|<noPointerAbstractPackDeclarator> <parametersAndQualifiers>
<(_Comma_question_Ellipsis_)>::=<Comma_question> <Ellipsis>
<(_Comma_question_Ellipsis_)_question>::=" "|<(_Comma_question_Ellipsis_)>
<parameterDeclarationClause>::=<parameterDeclarationList> <(_Comma_question_Ellipsis_)_question>
<(_Comma_parameterDeclaration_)>::=<Comma> <parameterDeclaration>
<(_Comma_parameterDeclaration_)_star>::=" "|<(_Comma_parameterDeclaration_)> <(_Comma_parameterDeclaration_)_star>
<parameterDeclarationList>::=<parameterDeclaration> <(_Comma_parameterDeclaration_)_star>
<(_Assign_initializerClause_)>::=<Assign> <initializerClause>
<(_Assign_initializerClause_)_question>::=" "|<(_Assign_initializerClause_)>
<parameterDeclaration>::=<attributeSpecifierSeq_question> <declSpecifierSeq> <abstractDeclarator_question> <(_Assign_initializerClause_)_question>|<attributeSpecifierSeq_question> <declSpecifierSeq> <declarator> <(_Assign_initializerClause_)_question>
<virtualSpecifierSeq_question>::=" "|<virtualSpecifierSeq>
<functionDefinition>::=<attributeSpecifierSeq_question> <declSpecifierSeq_question> <declarator> <virtualSpecifierSeq_question> <functionBody>
<constructorInitializer_question>::=" "|<constructorInitializer>
<functionBody>::=<Assign> <Delete> <Semi>|<Assign> <Default> <Semi>|<functionTryBlock> <Semi>|<constructorInitializer_question> <compoundStatement> <Semi>
<initializer>::=<LeftParen> <expressionList> <RightParen>|<braceOrEqualInitializer>
<braceOrEqualInitializer>::=<bracedInitList>|<Assign> <initializerClause>
<initializerClause>::=<bracedInitList>|<assignmentExpression>
<(_Comma_initializerClause_Ellipsis_question_)>::=<Comma> <initializerClause> <Ellipsis_question>
<(_Comma_initializerClause_Ellipsis_question_)_star>::=" "|<(_Comma_initializerClause_Ellipsis_question_)> <(_Comma_initializerClause_Ellipsis_question_)_star>
<initializerList>::=<initializerClause> <Ellipsis_question> <(_Comma_initializerClause_Ellipsis_question_)_star>
<(_initializerList_Comma_question_)>::=<initializerList> <Comma_question>
<(_initializerList_Comma_question_)_question>::=" "|<(_initializerList_Comma_question_)>
<bracedInitList>::=<LeftBrace> <(_initializerList_Comma_question_)_question> <RightBrace>
<className>::=<simpleTemplateId>|"Identifier"
<memberSpecification_question>::=" "|<memberSpecification>
<classSpecifier>::=<classHead> <LeftBrace> <memberSpecification_question> <RightBrace>
<classVirtSpecifier_question>::=" "|<classVirtSpecifier>
<(_classHeadName_classVirtSpecifier_question_)>::=<classHeadName> <classVirtSpecifier_question>
<(_classHeadName_classVirtSpecifier_question_)_question>::=" "|<(_classHeadName_classVirtSpecifier_question_)>
<baseClause_question>::=" "|<baseClause>
<classHead>::=<Union> <attributeSpecifierSeq_question> <(_classHeadName_classVirtSpecifier_question_)_question>|<classKey> <attributeSpecifierSeq_question> <(_classHeadName_classVirtSpecifier_question_)_question> <baseClause_question>
<classHeadName>::=<nestedNameSpecifier_question> <className>
<classVirtSpecifier>::=<Final>
<classKey>::=<Struct>|<Class>
<(_memberdeclaration_|_accessSpecifier_Colon_)>::=<accessSpecifier> <Colon>|<memberdeclaration>
<(_memberdeclaration_|_accessSpecifier_Colon_)_plus>::=<(_memberdeclaration_|_accessSpecifier_Colon_)>|<(_memberdeclaration_|_accessSpecifier_Colon_)> <(_memberdeclaration_|_accessSpecifier_Colon_)_plus>
<memberSpecification>::=<(_memberdeclaration_|_accessSpecifier_Colon_)_plus>
<memberDeclaratorList_question>::=" "|<memberDeclaratorList>
<memberdeclaration>::=<emptyDeclaration_>|<aliasDeclaration>|<templateDeclaration>|<staticAssertDeclaration>|<usingDeclaration>|<functionDefinition>|<attributeSpecifierSeq_question> <declSpecifierSeq_question> <memberDeclaratorList_question> <Semi>
<(_Comma_memberDeclarator_)>::=<Comma> <memberDeclarator>
<(_Comma_memberDeclarator_)_star>::=" "|<(_Comma_memberDeclarator_)> <(_Comma_memberDeclarator_)_star>
<memberDeclaratorList>::=<memberDeclarator> <(_Comma_memberDeclarator_)_star>
<Identifier_question>::=" "|"Identifier"
<memberDeclarator>::=<Identifier_question> <attributeSpecifierSeq_question> <Colon> <constantExpression>|<declarator>|<declarator> <braceOrEqualInitializer>|<declarator> <virtualSpecifierSeq>
<virtualSpecifier_plus>::=<virtualSpecifier>|<virtualSpecifier> <virtualSpecifier_plus>
<virtualSpecifierSeq>::=<virtualSpecifier_plus>
<virtualSpecifier>::=<Final>|<Override>
<baseClause>::=<Colon> <baseSpecifierList>
<(_Comma_baseSpecifier_Ellipsis_question_)>::=<Comma> <baseSpecifier> <Ellipsis_question>
<(_Comma_baseSpecifier_Ellipsis_question_)_star>::=" "|<(_Comma_baseSpecifier_Ellipsis_question_)> <(_Comma_baseSpecifier_Ellipsis_question_)_star>
<baseSpecifierList>::=<baseSpecifier> <Ellipsis_question> <(_Comma_baseSpecifier_Ellipsis_question_)_star>
<accessSpecifier_question>::=" "|<accessSpecifier>
<Virtual_question>::=" "|<Virtual>
<baseSpecifier>::=<attributeSpecifierSeq_question> <accessSpecifier> <Virtual_question> <baseTypeSpecifier>|<attributeSpecifierSeq_question> <Virtual> <accessSpecifier_question> <baseTypeSpecifier>|<attributeSpecifierSeq_question> <baseTypeSpecifier>
<classOrDeclType>::=<decltypeSpecifier>|<nestedNameSpecifier_question> <className>
<baseTypeSpecifier>::=<classOrDeclType>
<accessSpecifier>::=<Public>|<Protected>|<Private>
<conversionFunctionId>::=<Operator> <conversionTypeId>
<conversionDeclarator_question>::=" "|<conversionDeclarator>
<conversionTypeId>::=<typeSpecifierSeq> <conversionDeclarator_question>
<conversionDeclarator>::=<pointerOperator> <conversionDeclarator_question>
<constructorInitializer>::=<Colon> <memInitializerList>
<(_Comma_memInitializer_Ellipsis_question_)>::=<Comma> <memInitializer> <Ellipsis_question>
<(_Comma_memInitializer_Ellipsis_question_)_star>::=" "|<(_Comma_memInitializer_Ellipsis_question_)> <(_Comma_memInitializer_Ellipsis_question_)_star>
<memInitializerList>::=<memInitializer> <Ellipsis_question> <(_Comma_memInitializer_Ellipsis_question_)_star>
<memInitializer>::=<meminitializerid> <bracedInitList>|<meminitializerid> <LeftParen> <expressionList_question> <RightParen>
<meminitializerid>::="Identifier"|<classOrDeclType>
<operatorFunctionId>::=<Operator> <theOperator>
<literalOperatorId>::=<Operator> <StringLiteral> "Identifier"
<templateDeclaration>::=<Template> <Less> <templateparameterList> <Greater> <declaration>
<(_Comma_templateParameter_)>::=<Comma> <templateParameter>
<(_Comma_templateParameter_)_star>::=" "|<(_Comma_templateParameter_)> <(_Comma_templateParameter_)_star>
<templateparameterList>::=<templateParameter> <(_Comma_templateParameter_)_star>
<templateParameter>::=<parameterDeclaration>|<typeParameter>
<(_Template_Less_templateparameterList_Greater_)>::=<Template> <Less> <templateparameterList> <Greater>
<(_Template_Less_templateparameterList_Greater_)_question>::=" "|<(_Template_Less_templateparameterList_Greater_)>
<typeParameter>::=<Typename_> <Identifier_question> <Assign> <theTypeId>|<Typename_> <Ellipsis_question> <Identifier_question>|<(_Template_Less_templateparameterList_Greater_)_question> <Class> <Identifier_question> <Assign> <theTypeId>|<(_Template_Less_templateparameterList_Greater_)_question> <Class> <Ellipsis_question> <Identifier_question>
<templateArgumentList_question>::=" "|<templateArgumentList>
<simpleTemplateId>::=<templateName> <Less> <templateArgumentList_question> <Greater>
<templateId>::=<literalOperatorId> <Less> <templateArgumentList_question> <Greater>|<operatorFunctionId> <Less> <templateArgumentList_question> <Greater>|<simpleTemplateId> <Less> <templateArgumentList_question> <Greater>
<templateName>::="Identifier"
<(_Comma_templateArgument_Ellipsis_question_)>::=<Comma> <templateArgument> <Ellipsis_question>
<(_Comma_templateArgument_Ellipsis_question_)_star>::=" "|<(_Comma_templateArgument_Ellipsis_question_)> <(_Comma_templateArgument_Ellipsis_question_)_star>
<templateArgumentList>::=<templateArgument> <Ellipsis_question> <(_Comma_templateArgument_Ellipsis_question_)_star>
<templateArgument>::=<idExpression>|<constantExpression>|<theTypeId>
<typeNameSpecifier>::=<Typename_> <nestedNameSpecifier> <Template_question> <simpleTemplateId>|<Typename_> <nestedNameSpecifier> "Identifier"
<Extern_question>::=" "|<Extern>
<explicitInstantiation>::=<Extern_question> <Template> <declaration>
<explicitSpecialization>::=<Template> <Less> <Greater> <declaration>
<tryBlock>::=<Try> <compoundStatement> <handlerSeq>
<functionTryBlock>::=<Try> <constructorInitializer_question> <compoundStatement> <handlerSeq>
<handler_plus>::=<handler>|<handler> <handler_plus>
<handlerSeq>::=<handler_plus>
<handler>::=<Catch> <LeftParen> <exceptionDeclaration> <RightParen> <compoundStatement>
<(_declarator_|_abstractDeclarator_)>::=<abstractDeclarator>|<declarator>
<(_declarator_|_abstractDeclarator_)_question>::=" "|<(_declarator_|_abstractDeclarator_)>
<exceptionDeclaration>::=<Ellipsis>|<attributeSpecifierSeq_question> <typeSpecifierSeq> <(_declarator_|_abstractDeclarator_)_question>
<assignmentExpression_question>::=" "|<assignmentExpression>
<throwExpression>::=<Throw> <assignmentExpression_question>
<exceptionSpecification>::=<noeExceptSpecification>|<dynamicExceptionSpecification>
<typeIdList_question>::=" "|<typeIdList>
<dynamicExceptionSpecification>::=<Throw> <LeftParen> <typeIdList_question> <RightParen>
<(_Comma_theTypeId_Ellipsis_question_)>::=<Comma> <theTypeId> <Ellipsis_question>
<(_Comma_theTypeId_Ellipsis_question_)_star>::=" "|<(_Comma_theTypeId_Ellipsis_question_)> <(_Comma_theTypeId_Ellipsis_question_)_star>
<typeIdList>::=<theTypeId> <Ellipsis_question> <(_Comma_theTypeId_Ellipsis_question_)_star>
<noeExceptSpecification>::=<Noexcept>|<Noexcept> <LeftParen> <constantExpression> <RightParen>
<theOperator>::=<LeftBracket> <RightBracket>|<LeftParen> <RightParen>|<Arrow>|<ArrowStar>|<Comma>|<MinusMinus>|<PlusPlus>|<OrOr>|<AndAnd>|<LessEqual>|<NotEqual>|<Equal>|<LeftShiftAssign>|<RightShiftAssign>|<Greater> <Greater>|<Less> <Less>|<OrAssign>|<AndAssign>|<XorAssign>|<ModAssign>|<StarAssign>|<MinusAssign>|<PlusAssign>|<GreaterEqual>|<Less>|<Greater>|<Assign>|<Not>|<Tilde>|<Or>|<And>|<Caret>|<Mod>|<Div>|<Star>|<Minus>|<Plus>|<Delete> <(_LeftBracket_RightBracket_)_question>|<New> <(_LeftBracket_RightBracket_)_question>
<literal>::=<PointerLiteral>|<BooleanLiteral>|<StringLiteral>|<IntegerLiteral>
<StringLiteral>::=<letter>|<letter><StringLiteral>
<letter>::=a|e|o|i|u|b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z|A|E|I|O|U|B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z
<IntegerLiteral>::=<DIGIT>|<NONZERODIGIT><DIGIT_star>
<DIGIT_star>::=" "|<DIGIT><DIGIT_star>
<NONZERODIGIT>::=1|2|3|4|5|6|7|8|9
<DIGIT>::=0|1|2|3|4|5|6|7|8|9
<PointerLiteral>::=<Nullptr>
<BooleanLiteral>::=<False_>|<True_>
<Alignas>::="alignas"
<Alignof>::="alignof"
<Asm>::="asm"
<Auto>::="auto"
<Bool>::="bool"
<Break>::="break"
<Case>::="case"
<Catch>::="catch"
<Char>::="char"
<Char16>::="char16_t"
<Char32>::="char32_t"
<Class>::="class"
<Const>::="const"
<Constexpr>::="constexpr"
<Const_cast>::="const_cast"
<Continue>::="continue"
<Decltype>::="decltype"
<Default>::="default"
<Delete>::="delete"
<Do>::="do"
<Double>::="double"
<Dynamic_cast>::="dynamic_cast"
<Else>::="else"
<Enum>::="enum"
<Explicit>::="explicit"
<Extern>::="extern"
<False_>::="false"
<Final>::="final"
<Float>::="float"
<For>::="for"
<Friend>::="friend"
<Goto>::="goto"
<If>::="if"
<Inline>::="inline"
<Int>::="int"
<Long>::="long"
<Mutable>::="mutable"
<Namespace>::="namespace"
<New>::="new"
<Noexcept>::="noexcept"
<Nullptr>::="nullptr"
<Operator>::="operator"
<Override>::="override"
<Private>::="private"
<Protected>::="protected"
<Public>::="public"
<Register>::="register"
<Reinterpret_cast>::="reinterpret_cast"
<Return>::="return"
<Short>::="short"
<Signed>::="signed"
<Sizeof>::="sizeof"
<Static>::="static"
<Static_assert>::="static_assert"
<Static_cast>::="static_cast"
<Struct>::="struct"
<Switch>::="switch"
<Template>::="template"
<This>::="this"
<Thread_local>::="thread_local"
<Throw>::="throw"
<True_>::="true"
<Try>::="try"
<Typedef>::="typedef"
<Typeid_>::="typeid"
<Typename_>::="typename"
<Union>::="union"
<Unsigned>::="unsigned"
<Using>::="using"
<Virtual>::="virtual"
<Void>::="void"
<Volatile>::="volatile"
<Wchar>::="wchar_t"
<While>::="while"
<LeftParen>::="("
<RightParen>::=")"
<LeftBracket>::="["
<RightBracket>::="]"
<LeftBrace>::="{"
<RightBrace>::="}"
<Plus>::="+"
<Minus>::="-"
<Star>::="*"
<Div>::="/"
<Mod>::="%"
<Caret>::="^"
<And>::="&"
<Or>::="|"
<Tilde>::="~"
<Not>::="!"
<Assign>::="="
<Less>::="<"
<Greater>::=">"
<PlusAssign>::="+="
<MinusAssign>::="-="
<StarAssign>::="*="
<DivAssign>::="/="
<ModAssign>::="%="
<XorAssign>::="^="
<AndAssign>::="&="
<OrAssign>::="|="
<LeftShiftAssign>::="<<="
<RightShiftAssign>::=">>="
<Equal>::="=="
<NotEqual>::="!="
<LessEqual>::="<="
<GreaterEqual>::=">="
<AndAnd>::="&&"
<OrOr>::="||"
<PlusPlus>::="++"
<MinusMinus>::="--"
<Comma>::=","
<ArrowStar>::="->*"
<Arrow>::="->"
<Question>::="?"
<Colon>::=":"
<Doublecolon>::="::"
<Semi>::=";"
<Dot>::="."
<DotStar>::=".*"
<Ellipsis>::="..."
