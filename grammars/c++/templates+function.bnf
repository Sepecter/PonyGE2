<program>::=<templateDeclaration>|<templateDeclaration> <program>
<templateDeclaration>::=<Template> <Less> <templateparameterList> <Greater> <functionDefinition>
<(_Comma_templateParameter_)>::=<Comma> <templateParameter>
<(_Comma_templateParameter_)_star>::=" "|<(_Comma_templateParameter_)> <(_Comma_templateParameter_)_star>
<templateparameterList>::=<templateParameter> <(_Comma_templateParameter_)_star>
<templateParameter>::=<typeParameter>
<(_Template_Less_templateparameterList_Greater_)>::=<Template> <Less> <templateparameterList> <Greater>
<(_Template_Less_templateparameterList_Greater_)_question>::=" "|<(_Template_Less_templateparameterList_Greater_)>
<Ellipsis_question>::=" "|<Ellipsis>
<Identifier_question>::=" "|Identifier
<typeParameter>::=<Typename_> <Identifier_question> <Assign> <theTypeId>|<Typename_> <Ellipsis_question> <Identifier_question>|<(_Template_Less_templateparameterList_Greater_)_question> <Class> <Identifier_question> <Assign> <theTypeId>|<(_Template_Less_templateparameterList_Greater_)_question> <Class> <Ellipsis_question> <Identifier_question>
<templateArgumentList_question>::=" "|<templateArgumentList>
<simpleTemplateId>::=<templateName> <Less> <templateArgumentList_question> <Greater>
<templateId>::=<operatorFunctionId> <Less> <templateArgumentList_question> <Greater>|<simpleTemplateId>
<templateName>::=Identifier
<(_Comma_templateArgument_Ellipsis_question_)>::=<Comma> <templateArgument> <Ellipsis_question>
<(_Comma_templateArgument_Ellipsis_question_)_star>::=" "|<(_Comma_templateArgument_Ellipsis_question_)> <(_Comma_templateArgument_Ellipsis_question_)_star>
<templateArgumentList>::=<templateArgument> <Ellipsis_question> <(_Comma_templateArgument_Ellipsis_question_)_star>
<templateArgument>::=<idExpression>|<theTypeId>
<typeSpecifier_plus>::=<typeSpecifier>|<typeSpecifier> <typeSpecifier_plus>
<attributeSpecifierSeq_question>::=" "|<attributeSpecifierSeq>
<typeSpecifierSeq>::=<typeSpecifier_plus> <attributeSpecifierSeq_question>
<typeSpecifier>::=<trailingTypeSpecifier>
<trailingTypeSpecifier>::=<cvQualifier>|<typeNameSpecifier>|<simpleTypeSpecifier>
<nestedNameSpecifier_question>::=" "|<nestedNameSpecifier>
<simpleTypeSpecifier>::=<Auto>|<Void>|<Int>|<nestedNameSpecifier> <Template> <simpleTemplateId>|<nestedNameSpecifier_question> <theTypeName>
<(_theTypeName_or_namespaceName_)>::=Identifier|<theTypeName>
<(_theTypeName_or_namespaceName_)_question>::=" "|<(_theTypeName_or_namespaceName_)>
<Template_question>::=" "|<Template>
<nestedNameSpecifier>::=<nestedNameSpecifier> <Template_question> <simpleTemplateId> <Doublecolon>|<nestedNameSpecifier> Identifier <Doublecolon>|<(_theTypeName_or_namespaceName_)_question> <Doublecolon> <Doublecolon>
<theTypeName>::=<simpleTemplateId>|<typedefName>
<typedefName>::=Identifier
<typeNameSpecifier>::=<Typename_> <nestedNameSpecifier> <Template_question> <simpleTemplateId>|<Typename_> <nestedNameSpecifier> Identifier
<attributeSpecifier_plus>::=<attributeSpecifier>|<attributeSpecifier> <attributeSpecifier_plus>
<attributeSpecifierSeq>::=<attributeSpecifier_plus>
<attributeList_question>::=" "|<attributeList>
<attributeSpecifier>::=<alignmentspecifier>|<LeftBracket> <LeftBracket> <attributeList_question> <RightBracket> <RightBracket>
<alignmentspecifier>::=<Alignas> <LeftParen> <theTypeId> <Ellipsis_question> <RightParen>
<(_Comma_attribute_)>::=<Comma> <attribute>
<(_Comma_attribute_)_star>::=" "|<(_Comma_attribute_)> <(_Comma_attribute_)_star>
<attributeList>::=<attribute> <(_Comma_attribute_)_star> <Ellipsis_question>
<(_attributeNamespace_Doublecolon_)>::=<attributeNamespace> <Doublecolon>
<(_attributeNamespace_Doublecolon_)_question>::=" "|<(_attributeNamespace_Doublecolon_)>
<attributeArgumentClause_question>::=" "|<attributeArgumentClause>
<attribute>::=<(_attributeNamespace_Doublecolon_)_question> Identifier <attributeArgumentClause_question>
<attributeNamespace>::=Identifier
<balancedTokenSeq_question>::=" "|<balancedTokenSeq>
<attributeArgumentClause>::=<LeftParen> <balancedTokenSeq_question> <RightParen>
<balancedtoken_plus>::=<balancedtoken>|<balancedtoken> <balancedtoken_plus>
<balancedTokenSeq>::=<balancedtoken_plus>
<balancedtoken>::=<LeftBrace> <balancedTokenSeq> <RightBrace>|<LeftBracket> <balancedTokenSeq> <RightBracket>|<LeftParen> <balancedTokenSeq> <RightParen>|" "
<operatorFunctionId>::=<Operator> <theOperator>
<(_LeftBracket_RightBracket_)>::=<LeftBracket> <RightBracket>
<(_LeftBracket_RightBracket_)_question>::=" "|<(_LeftBracket_RightBracket_)>
<theOperator>::=<LeftBracket> <RightBracket>|<LeftParen> <RightParen>|<Arrow>|<ArrowStar>|<Comma>|<PlusPlus>|<OrOr>|<AndAnd>|<LessEqual>|<NotEqual>|<Equal>|<LeftShiftAssign>|<RightShiftAssign>|<Greater> <Greater>|<Less> <Less>|<OrAssign>|<AndAssign>|<XorAssign>|<ModAssign>|<StarAssign>|<PlusAssign>|<GreaterEqual>|<Less>|<Greater>|<Assign>|<Not>|<Tilde>|<Or>|<And>|<Caret>|<Div>|<Star>|<Plus>|<Delete> <(_LeftBracket_RightBracket_)_question>|<New> <(_LeftBracket_RightBracket_)_question>
<idExpression>::=<qualifiedId>|<unqualifiedId>
<unqualifiedId>::=<templateId>|<operatorFunctionId>|Identifier
<qualifiedId>::=<nestedNameSpecifier> <Template_question> <unqualifiedId>
<functionDefinition>::=<attributeSpecifierSeq_question> <declarator> <functionBody>
<functionBody>::=<compoundStatement>
<compoundStatement>::=<LeftBrace> <RightBrace>
<declarator>::=<noPointerDeclarator> <parametersAndQualifiers> <trailingReturnType>|<pointerDeclarator>
<Const_question>::=" "|<Const>
<(_pointerOperator_Const_question_)>::=<pointerOperator> <Const_question>
<(_pointerOperator_Const_question_)_star>::=" "|<(_pointerOperator_Const_question_)> <(_pointerOperator_Const_question_)_star>
<pointerDeclarator>::=<(_pointerOperator_Const_question_)_star> <noPointerDeclarator>
<noPointerDeclarator>::=<LeftParen> <pointerDeclarator> <RightParen>|<noPointerDeclarator> <LeftBracket> <RightBracket> <attributeSpecifierSeq_question>|<noPointerDeclarator> <parametersAndQualifiers>|<declaratorid> <attributeSpecifierSeq_question>
<parameterDeclarationClause_question>::=" "|<parameterDeclarationClause>
<cvqualifierseq_question>::=" "|<cvqualifierseq>
<refqualifier_question>::=" "|<refqualifier>
<parametersAndQualifiers>::=<LeftParen> <parameterDeclarationClause_question> <RightParen> <cvqualifierseq_question> <refqualifier_question> <attributeSpecifierSeq_question>
<abstractDeclarator_question>::=" "|<abstractDeclarator>
<trailingReturnType>::=<Arrow> <trailingTypeSpecifierSeq> <abstractDeclarator_question>
<trailingTypeSpecifier_plus>::=<trailingTypeSpecifier>|<trailingTypeSpecifier> <trailingTypeSpecifier_plus>
<trailingTypeSpecifierSeq>::=<trailingTypeSpecifier_plus> <attributeSpecifierSeq_question>
<pointerOperator>::=<nestedNameSpecifier_question> <Star> <attributeSpecifierSeq_question> <cvqualifierseq_question>|<AndAnd> <attributeSpecifierSeq_question>|<And> <attributeSpecifierSeq_question>
<cvQualifier_plus>::=<cvQualifier>|<cvQualifier> <cvQualifier_plus>
<cvqualifierseq>::=<cvQualifier_plus>
<cvQualifier>::=<Volatile>|<Const>
<refqualifier>::=<AndAnd>|<And>
<declaratorid>::=<Ellipsis_question> <idExpression>
<theTypeId>::=<typeSpecifierSeq> <abstractDeclarator_question>
<noPointerAbstractDeclarator_question>::=" "|<noPointerAbstractDeclarator>
<abstractDeclarator>::=<abstractPackDeclarator>|<noPointerAbstractDeclarator_question> <parametersAndQualifiers> <trailingReturnType>|<pointerAbstractDeclarator>
<pointerOperator_plus>::=<pointerOperator>|<pointerOperator> <pointerOperator_plus>
<pointerAbstractDeclarator>::=<pointerOperator_plus> <noPointerAbstractDeclarator_question>|<noPointerAbstractDeclarator>
<noPointerAbstractDeclarator>::=<LeftParen> <pointerAbstractDeclarator> <RightParen>|<LeftBracket> <RightBracket> <attributeSpecifierSeq_question>|<parametersAndQualifiers>|<noPointerAbstractDeclarator> <noPointerAbstractDeclarator> <LeftBracket> <RightBracket> <attributeSpecifierSeq_question>|<noPointerAbstractDeclarator> <parametersAndQualifiers>
<pointerOperator_star>::=" "|<pointerOperator> <pointerOperator_star>
<abstractPackDeclarator>::=<pointerOperator_star> <noPointerAbstractPackDeclarator>
<noPointerAbstractPackDeclarator>::=<Ellipsis>|<noPointerAbstractPackDeclarator> <LeftBracket> <RightBracket> <attributeSpecifierSeq_question>|<noPointerAbstractPackDeclarator> <parametersAndQualifiers>
<Comma_question>::=" "|<Comma>
<(_Comma_question_Ellipsis_)>::=<Comma_question> <Ellipsis>
<(_Comma_question_Ellipsis_)_question>::=" "|<(_Comma_question_Ellipsis_)>
<parameterDeclarationClause>::=<parameterDeclarationList> <(_Comma_question_Ellipsis_)_question>
<(_Comma_parameterDeclaration_)>::=<Comma> <parameterDeclaration>
<(_Comma_parameterDeclaration_)_star>::=" "|<(_Comma_parameterDeclaration_)> <(_Comma_parameterDeclaration_)_star>
<parameterDeclarationList>::=<parameterDeclaration> <(_Comma_parameterDeclaration_)_star>
<(_Assign_initializerClause_)>::=<Assign> <LeftBrace>  <RightBrace>
<(_Assign_initializerClause_)_question>::=" "|<(_Assign_initializerClause_)>
<parameterDeclaration>::=<attributeSpecifierSeq_question> <declSpecifierSeq> <abstractDeclarator_question> <(_Assign_initializerClause_)_question>|<attributeSpecifierSeq_question> <declSpecifierSeq> <declarator> <(_Assign_initializerClause_)_question>
<declSpecifierSeq>::=<declSpecifier> <declSpecifierSeq>|<declSpecifier>
<declSpecifier>::=<Typedef>|<typeSpecifier>
<Alignas>::="alignas"
<Auto>::="auto"
<Class>::="class"
<Delete>::="delete"
<Int>::="int"
<New>::="new"
<Operator>::="operator"
<Template>::="template"
<Typename_>::="typename"
<Void>::="void"
<LeftParen>::="("
<RightParen>::=")"
<LeftBracket>::="["
<RightBracket>::="]"
<LeftBrace>::="{"
<RightBrace>::="}"
<Plus>::="+"
<Star>::="*"
<Div>::="/"
<Caret>::="^"
<And>::="&"
<Or>::="|"
<Tilde>::="~"
<Not>::="!"
<Assign>::="="
<Less>::="<"
<Greater>::=">"
<PlusAssign>::="+="
<StarAssign>::="*="
<ModAssign>::="%="
<XorAssign>::="^="
<AndAssign>::="&="
<OrAssign>::="|="
<LeftShiftAssign>::="<<="
<RightShiftAssign>::=">>="
<Equal>::="=="
<NotEqual>::="!="
<LessEqual>::="<="
<GreaterEqual>::=">="
<AndAnd>::="&&"
<OrOr>::="||"
<PlusPlus>::="++"
<Comma>::=","
<ArrowStar>::="->*"
<Arrow>::="->"
<Doublecolon>::="::"
<Ellipsis>::="..."
<Const>::="const"
<Volatile>::="volatile"
<Typedef>::="typedef"